--
-- PostgreSQL database dump
--

-- Dumped from database version 15.1 (Ubuntu 15.1-1.pgdg20.04+1)
-- Dumped by pg_dump version 15.12 (Homebrew)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: public; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA public;


--
-- Name: delete_user(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.delete_user() RETURNS void
    LANGUAGE plpgsql
    AS $_$BEGIN
  CREATE or replace function delete_user()
    returns void
  LANGUAGE SQL SECURITY DEFINER
  AS $$
    --delete from public.profiles where id = auth.uid();
    delete from auth.users where id = auth.uid();
  $$;
END;$_$;


--
-- Name: notify_api_restart(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.notify_api_restart() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
     BEGIN
       NOTIFY ddl_command_end;
     END;
     $$;


--
-- Name: FUNCTION notify_api_restart(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.notify_api_restart() IS 'Sends a notification to the API to restart. If your database schema has changed, this is required so that Supabase can rebuild the relationships.';


SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: Annotation; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."Annotation" (
    _id uuid DEFAULT gen_random_uuid() NOT NULL,
    text text NOT NULL,
    note text,
    serialized text NOT NULL,
    user_id uuid,
    url text,
    item_id uuid,
    updated_at timestamp with time zone,
    created_at timestamp with time zone NOT NULL,
    last_shown timestamp with time zone
);


--
-- Name: Category; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."Category" (
    _id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text,
    user_id uuid DEFAULT auth.uid()
);


--
-- Name: Category_Feed; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."Category_Feed" (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    category_id uuid,
    feed_id uuid
);


--
-- Name: Category_Feed_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public."Category_Feed" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Category_Feed_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Category_Item; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."Category_Item" (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    category_id uuid,
    item_id uuid
);


--
-- Name: Category_Item_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public."Category_Item" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Category_Item_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Feed; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."Feed" (
    root_url text,
    url character varying NOT NULL,
    last_accessed timestamp with time zone,
    title character varying NOT NULL,
    description character varying,
    etag text,
    color text,
    favicon_url text,
    favicon_size text,
    _id uuid NOT NULL,
    did_error boolean,
    feedbin_id integer,
    subscribe_url text
);


--
-- Name: COLUMN "Feed".root_url; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public."Feed".root_url IS 'URL of the site for which this is the feed';


--
-- Name: COLUMN "Feed".url; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public."Feed".url IS 'URL of the feed';


--
-- Name: COLUMN "Feed".last_accessed; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public."Feed".last_accessed IS 'Date this was last known to exist';


--
-- Name: COLUMN "Feed".title; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public."Feed".title IS 'Feed title';


--
-- Name: COLUMN "Feed".etag; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public."Feed".etag IS 'the etag from the last time this feed was retrieved';


--
-- Name: COLUMN "Feed".favicon_size; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public."Feed".favicon_size IS 'e.g. "120x120"';


--
-- Name: Item; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."Item" (
    _id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    url text,
    title text,
    feed_id uuid
);


--
-- Name: TABLE "Item"; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public."Item" IS 'Saved items';


--
-- Name: Newsletter; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."Newsletter" (
    url text,
    last_accessed timestamp with time zone,
    title character varying NOT NULL,
    description character varying,
    color text,
    favicon_url text,
    favicon_size text,
    _id uuid NOT NULL,
    subscribe_url text
);


--
-- Name: COLUMN "Newsletter".url; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public."Newsletter".url IS 'URL of the site for which this is the feed';


--
-- Name: COLUMN "Newsletter".last_accessed; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public."Newsletter".last_accessed IS 'Date this was last known to exist';


--
-- Name: COLUMN "Newsletter".title; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public."Newsletter".title IS 'Feed title';


--
-- Name: COLUMN "Newsletter".favicon_size; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public."Newsletter".favicon_size IS 'e.g. "120x120"';


--
-- Name: Profile; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."Profile" (
    id uuid DEFAULT auth.uid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    code_name text NOT NULL
);


--
-- Name: User_CodeName; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."User_CodeName" (
    user_id uuid DEFAULT auth.uid() NOT NULL,
    code_name text NOT NULL
);


--
-- Name: User_Feed; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."User_Feed" (
    created_at timestamp with time zone DEFAULT now(),
    user_id uuid NOT NULL,
    feed_id uuid NOT NULL,
    is_nudge_active boolean DEFAULT true NOT NULL,
    read_count integer,
    next_nudge integer
);


--
-- Name: COLUMN "User_Feed".next_nudge; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public."User_Feed".next_nudge IS 'Read count at which nudge should appear';


--
-- Name: User_Newsletter; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."User_Newsletter" (
    created_at timestamp with time zone DEFAULT now(),
    user_id uuid NOT NULL,
    newsletter_id uuid NOT NULL,
    is_nudge_active boolean,
    read_count integer,
    next_nudge integer
);


--
-- Name: User_ReadItem; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."User_ReadItem" (
    created_at timestamp with time zone DEFAULT now(),
    user_id uuid NOT NULL,
    item_id uuid NOT NULL
);


--
-- Name: User_SavedItem; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."User_SavedItem" (
    item_id uuid NOT NULL,
    saved_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id uuid,
    id integer NOT NULL
);


--
-- Name: User_SavedItem_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public."User_SavedItem" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."User_SavedItem_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Annotation Annotation_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Annotation"
    ADD CONSTRAINT "Annotation_pkey" PRIMARY KEY (_id);


--
-- Name: Category_Feed Category_Feed_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Category_Feed"
    ADD CONSTRAINT "Category_Feed_pkey" PRIMARY KEY (id);


--
-- Name: Category_Item Category_Item_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Category_Item"
    ADD CONSTRAINT "Category_Item_pkey" PRIMARY KEY (id);


--
-- Name: Category Category_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Category"
    ADD CONSTRAINT "Category_pkey" PRIMARY KEY (_id);


--
-- Name: User_CodeName CodeName_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User_CodeName"
    ADD CONSTRAINT "CodeName_pkey" PRIMARY KEY (user_id);


--
-- Name: Feed Feed__id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Feed"
    ADD CONSTRAINT "Feed__id_key" UNIQUE (_id);


--
-- Name: Feed Feed_feedbin_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Feed"
    ADD CONSTRAINT "Feed_feedbin_id_key" UNIQUE (feedbin_id);


--
-- Name: Feed Feed_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Feed"
    ADD CONSTRAINT "Feed_pkey" PRIMARY KEY (_id);


--
-- Name: Item Item_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Item"
    ADD CONSTRAINT "Item_pkey" PRIMARY KEY (_id);


--
-- Name: Newsletter Newsletter__id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Newsletter"
    ADD CONSTRAINT "Newsletter__id_key" UNIQUE (_id);


--
-- Name: Newsletter Newsletter_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Newsletter"
    ADD CONSTRAINT "Newsletter_pkey" PRIMARY KEY (_id);


--
-- Name: Profile Profile_code_name_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Profile"
    ADD CONSTRAINT "Profile_code_name_key" UNIQUE (code_name);


--
-- Name: Profile Profile_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Profile"
    ADD CONSTRAINT "Profile_pkey" PRIMARY KEY (id);


--
-- Name: User_Feed User_Feed_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User_Feed"
    ADD CONSTRAINT "User_Feed_pkey" PRIMARY KEY (user_id, feed_id);


--
-- Name: User_Newsletter User_Newsletter_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User_Newsletter"
    ADD CONSTRAINT "User_Newsletter_pkey" PRIMARY KEY (user_id, newsletter_id);


--
-- Name: User_SavedItem User_SavedItem_item_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User_SavedItem"
    ADD CONSTRAINT "User_SavedItem_item_id_key" UNIQUE (item_id);


--
-- Name: User_SavedItem User_SavedItem_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User_SavedItem"
    ADD CONSTRAINT "User_SavedItem_pkey" PRIMARY KEY (id);


--
-- Name: Item id_url_unique; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Item"
    ADD CONSTRAINT id_url_unique UNIQUE (_id, url);


--
-- Name: User_ReadItem user_readitem_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User_ReadItem"
    ADD CONSTRAINT user_readitem_pkey PRIMARY KEY (user_id, item_id);


--
-- Name: Annotation Annotation_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Annotation"
    ADD CONSTRAINT "Annotation_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: Profile Profile_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Profile"
    ADD CONSTRAINT "Profile_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: User_CodeName User_CodeName_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User_CodeName"
    ADD CONSTRAINT "User_CodeName_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: User_SavedItem User_SavedItem_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User_SavedItem"
    ADD CONSTRAINT "User_SavedItem_item_id_fkey" FOREIGN KEY (item_id) REFERENCES public."Item"(_id) ON DELETE CASCADE;


--
-- Name: User_SavedItem User_SavedItem_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User_SavedItem"
    ADD CONSTRAINT "User_SavedItem_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: Category_Feed public_Category_Feed_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Category_Feed"
    ADD CONSTRAINT "public_Category_Feed_category_id_fkey" FOREIGN KEY (category_id) REFERENCES public."Category"(_id) ON DELETE CASCADE;


--
-- Name: Category_Feed public_Category_Feed_feed_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Category_Feed"
    ADD CONSTRAINT "public_Category_Feed_feed_id_fkey" FOREIGN KEY (feed_id) REFERENCES public."Feed"(_id) ON DELETE CASCADE;


--
-- Name: Category_Item public_Category_Item_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Category_Item"
    ADD CONSTRAINT "public_Category_Item_category_id_fkey" FOREIGN KEY (category_id) REFERENCES public."Category"(_id) ON DELETE CASCADE;


--
-- Name: Category_Item public_Category_Item_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Category_Item"
    ADD CONSTRAINT "public_Category_Item_item_id_fkey" FOREIGN KEY (item_id) REFERENCES public."Item"(_id) ON DELETE CASCADE;


--
-- Name: Category public_Category_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Category"
    ADD CONSTRAINT "public_Category_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: User_Newsletter public_User_Newsletter_newsletter_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User_Newsletter"
    ADD CONSTRAINT "public_User_Newsletter_newsletter_id_fkey" FOREIGN KEY (newsletter_id) REFERENCES public."Newsletter"(_id) ON DELETE CASCADE;


--
-- Name: User_Newsletter public_User_Newsletter_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User_Newsletter"
    ADD CONSTRAINT "public_User_Newsletter_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: User_Feed user_feed_feed_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User_Feed"
    ADD CONSTRAINT user_feed_feed_id_fkey FOREIGN KEY (feed_id) REFERENCES public."Feed"(_id) ON DELETE CASCADE;


--
-- Name: User_Feed user_feed_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User_Feed"
    ADD CONSTRAINT user_feed_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: User_ReadItem user_readitem_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User_ReadItem"
    ADD CONSTRAINT user_readitem_item_id_fkey FOREIGN KEY (item_id) REFERENCES public."Item"(_id) ON DELETE CASCADE;


--
-- Name: User_ReadItem user_readitem_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User_ReadItem"
    ADD CONSTRAINT user_readitem_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: Annotation; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public."Annotation" ENABLE ROW LEVEL SECURITY;

--
-- Name: Category; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public."Category" ENABLE ROW LEVEL SECURITY;

--
-- Name: Category_Feed; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public."Category_Feed" ENABLE ROW LEVEL SECURITY;

--
-- Name: Category_Item; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public."Category_Item" ENABLE ROW LEVEL SECURITY;

--
-- Name: Annotation Enable all for users based on user_id; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable all for users based on user_id" ON public."Annotation" USING ((auth.uid() = user_id));


--
-- Name: Category Enable all for users based on user_id; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable all for users based on user_id" ON public."Category" USING ((auth.uid() = user_id));


--
-- Name: User_ReadItem Enable all for users based on user_id; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable all for users based on user_id" ON public."User_ReadItem" USING ((auth.uid() = user_id));


--
-- Name: User_Feed Enable delete for users based on user_id; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable delete for users based on user_id" ON public."User_Feed" USING ((auth.uid() = user_id));


--
-- Name: User_Newsletter Enable delete for users based on user_id; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable delete for users based on user_id" ON public."User_Newsletter" FOR DELETE USING ((auth.uid() = user_id));


--
-- Name: User_SavedItem Enable delete for users based on user_id; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable delete for users based on user_id" ON public."User_SavedItem" FOR DELETE USING ((auth.uid() = user_id));


--
-- Name: Feed Enable insert access for all users; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable insert access for all users" ON public."Feed" FOR INSERT WITH CHECK (true);


--
-- Name: Newsletter Enable insert for authenticated users only; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable insert for authenticated users only" ON public."Newsletter" FOR INSERT TO authenticated WITH CHECK (true);


--
-- Name: User_SavedItem Enable insert for authenticated users only; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable insert for authenticated users only" ON public."User_SavedItem" FOR INSERT TO authenticated WITH CHECK (true);


--
-- Name: User_CodeName Enable insert for users based on user_id; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable insert for users based on user_id" ON public."User_CodeName" FOR INSERT WITH CHECK ((( SELECT auth.uid() AS uid) = user_id));


--
-- Name: User_Newsletter Enable insert for users based on user_id; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable insert for users based on user_id" ON public."User_Newsletter" FOR INSERT WITH CHECK ((auth.uid() = user_id));


--
-- Name: Newsletter Enable read access for all users; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable read access for all users" ON public."Newsletter" FOR SELECT USING (true);


--
-- Name: User_CodeName Enable read access for all users; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable read access for all users" ON public."User_CodeName" FOR SELECT USING (true);


--
-- Name: User_SavedItem Enable select for authenticated users only; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable select for authenticated users only" ON public."User_SavedItem" FOR SELECT TO authenticated USING (true);


--
-- Name: User_Newsletter Enable select for users based on user_id; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable select for users based on user_id" ON public."User_Newsletter" FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: User_Newsletter Enable update for users based on user_id; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Enable update for users based on user_id" ON public."User_Newsletter" FOR UPDATE USING ((auth.uid() = user_id));


--
-- Name: Feed; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public."Feed" ENABLE ROW LEVEL SECURITY;

--
-- Name: Item; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public."Item" ENABLE ROW LEVEL SECURITY;

--
-- Name: Newsletter; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public."Newsletter" ENABLE ROW LEVEL SECURITY;

--
-- Name: Profile; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public."Profile" ENABLE ROW LEVEL SECURITY;

--
-- Name: User_CodeName; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public."User_CodeName" ENABLE ROW LEVEL SECURITY;

--
-- Name: User_Feed; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public."User_Feed" ENABLE ROW LEVEL SECURITY;

--
-- Name: User_Newsletter; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public."User_Newsletter" ENABLE ROW LEVEL SECURITY;

--
-- Name: User_ReadItem; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public."User_ReadItem" ENABLE ROW LEVEL SECURITY;

--
-- Name: User_SavedItem; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public."User_SavedItem" ENABLE ROW LEVEL SECURITY;

--
-- Name: Category_Feed Users can select all data; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can select all data" ON public."Category_Feed" USING (true);


--
-- Name: Category_Item Users can select all data; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can select all data" ON public."Category_Item" USING (true);


--
-- Name: Feed Users can select all data; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can select all data" ON public."Feed" FOR SELECT USING (true);


--
-- Name: Item all_item_for_authenticated_users; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY all_item_for_authenticated_users ON public."Item" USING (true);


--
-- PostgreSQL database dump complete
--

